package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL,MAYOR,MENOR,MAYOR_IGUAL,MENOR_IGUAL,IGUAL_IGUAL,DIFERENTE;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER,AND,OR,NOT;
nonterminal NodoC3D inicial, expresion, ExpRel, ExpLogic,OPREL;


precedence left OR;
precedence left AND;
precedence right NOT;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} ExpLogic:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                    :};

ExpLogic    ::= ExpRel:izq AND ExpRel:der             {: 
                                                        String temp = ControlC3D.generaTemp();
                                                        String c3d = temp + " = " + izq.getCad() + " && " + der.getCad() + ";\n";
                                                        ControlC3D.agregarC3D(c3d);
                                                        RESULT = new NodoC3D(temp);         
                                                     :}
                |ExpRel:izq OR ExpRel:der             {: 
                                                        String temp = ControlC3D.generaTemp();
                                                        String c3d = temp + " = " + izq.getCad() + " || " + der.getCad() + ";\n";
                                                        ControlC3D.agregarC3D(c3d);
                                                        RESULT = new NodoC3D(temp);         
                                                     :}   
                |NOT ExpRel:exp                      {: 
                                                        String temp = ControlC3D.generaTemp();
                                                        String c3d = temp + " = !" + exp.getCad() + ";\n";
                                                        ControlC3D.agregarC3D(c3d);
                                                        RESULT = new NodoC3D(temp);         
                                                     :}
                |ExpRel:exp                             {: RESULT = exp; :}
                ;

ExpRel    ::= expresion:izq OPREL:ope expresion:der {: 
                                                        String temp = ControlC3D.generaTemp();
                                                        String c3d = temp + " = " + izq.getCad() + " " + ope.getCad() + " " + der.getCad() + ";\n";
                                                        ControlC3D.agregarC3D(c3d);
                                                        RESULT = new NodoC3D(temp);         
                                                     :}
                |expresion:exp                       {: RESULT = exp; :}
                ;


OPREL       ::=  MAYOR:mayor               {: RESULT = new NodoC3D(mayor); :} 
                |MENOR:menor               {: RESULT = new NodoC3D(menor); :} 
                |MAYOR_IGUAL:mayigual      {: RESULT = new NodoC3D(mayigual); :} 
                |MENOR_IGUAL:menigual      {: RESULT = new NodoC3D(menigual); :} 
                |IGUAL_IGUAL:igualigual    {: RESULT = new NodoC3D(igualigual); :} 
                |DIFERENTE:dif             {: RESULT = new NodoC3D(dif); :} 
                ;    

                

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;